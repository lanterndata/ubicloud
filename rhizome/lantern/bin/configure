#!/bin/env ruby
# frozen_string_literal: true

require "json"
require "yaml"
require_relative "../../common/lib/util"
require_relative "../lib/common"

$configure_hash = JSON.parse($stdin.read)
File.open("test.json", "a") do |f|
  f.puts($configure_hash.to_json)
end

def install_dependencies
  # Install dependencies
  r "sudo apt update -qq && sudo apt install software-properties-common make -y -qq >/dev/null"
  r "curl -fsSL https://get.docker.com > /tmp/get-docker.sh"
  r "chmod +x /tmp/get-docker.sh && /tmp/get-docker.sh"
  # Fix /etc/init.d/docker: 62: ulimit: error setting limit (Invalid argument) error
  r "sudo sed -i 's/ulimit -Hn/ulimit -n/' /etc/init.d/docker"
  r "sudo service docker restart"
end

def setup_memory_limits
  r "sudo sh -c 'echo vm.overcommit_ratio=100 >> /etc/sysctl.d/99-lantern.conf'"
  r "sudo sh -c 'echo vm.overcommit_memory=2 >> /etc/sysctl.d/99-lantern.conf'"
  r "sudo sh -c 'echo vm.swappiness=10 >> /etc/sysctl.d/99-lantern.conf'"
  r "sudo sysctl -p /etc/sysctl.d/99-lantern.conf"
end

def setup_fs
  # Setup FS
  r "sudo mkdir -p #{$datadir}"
  # Directory for configuration
  r "sudo mkdir -p #{$workdir}"

  # Setup core pattern
  if $configure_hash["enable_coredumps"]
    r "sudo su -c 'echo \"/bitnami/postgresql/data/core.%e.%p.%t\" > /proc/sys/kernel/core_pattern'"
  end

  # Add swap
  r "sudo fallocate -l 1G /swapfile"
  r "sudo chmod 600 /swapfile"
  r "sudo mkswap /swapfile"
  r "sudo swapon /swapfile"

  # Mount data volume
  r "sudo mkfs.ext4 /dev/sdb"
  r "sudo mount /dev/sdb #{$datadir}"
  r "sudo su -c \"echo '/dev/sdb #{$datadir} ext4 defaults 0 0' >> /etc/fstab\""

  r "sudo chown -R 1001:1001 #{$datadir}"
end

def setup_env
  # Setup env file
  unless File.file?($env_file)
    File.open($env_file, "a") do |f|
      f.puts("ORGANIZATION_ID=#{$configure_hash["org_id"]}")
      f.puts("INSTANCE_ID=#{$configure_hash["instance_id"]}")
      f.puts("INSTANCE_TYPE=#{$configure_hash["instance_type"]}")
      f.puts("APP_ENV=#{$configure_hash["app_env"]}")
      f.puts("POSTGRESQL_REPLICATION_MODE=#{$configure_hash["replication_mode"]}")
      f.puts("POSTGRESQL_REPLICATION_USER=#{$configure_hash["repl_user"]}")
      f.puts("POSTGRESQL_REPLICATION_PASSWORD='#{$configure_hash["repl_password"]}'")
      f.puts("POSTGRESQL_MASTER_HOST=#{$configure_hash["master_host"]}")
      f.puts("POSTGRESQL_MASTER_PORT_NUMBER=#{$configure_hash["master_port"]}")
      f.puts("POSTGRESQL_LOG_HOSTNAME=true")
      f.puts("GOOGLE_CLOUD_BUCKET_NAME=client-db-coredumps")
      f.puts("POSTGRESQL_DATABASE=#{$configure_hash["db_name"]}")
      f.puts("POSTGRESQL_POSTGRES_PASSWORD='#{$configure_hash["postgres_password"]}'")
      f.puts("POSTGRESQL_USERNAME=#{$configure_hash["db_user"]}")
      f.puts("PROMETHEUS_WRITER_USERNAME=1296757")
      f.puts("PROMETHEUS_WRITER_PASSWORD=#{$configure_hash["prom_password"]}")
      f.puts("PROMETHEUS_WRITER_URL=https://prometheus.lantern.dev/api/v1/write")
      f.puts("POSTGRESQL_ENABLE_COREDUMPS=#{$configure_hash["enable_coredumps"]}")
      f.puts("ENABLE_TELEMETRY=#{$configure_hash["enable_telemetry"] ? 'yes' : 'no'}")
      f.puts("GOOGLE_APPLICATION_CREDENTIALS_B64=#{$configure_hash["gcp_creds_coredumps_b64"]}")
      f.puts("GOOGLE_APPLICATION_CREDENTIALS_WALG_B64=#{$configure_hash["gcp_creds_walg_b64"]}")
      f.puts("WALG_GS_PREFIX=#{$configure_hash["walg_gs_prefix"]}")
      f.puts("POSTGRESQL_RECOVER_FROM_BACKUP=#{$configure_hash["postgresql_recover_from_backup"]}")
      f.puts("POSTGRESQL_RECOVERY_TARGET_TIME=#{$configure_hash["postgresql_recovery_target_time"]}")
      f.puts("POSTGRESQL_RECOVERY_TARGET_LSN=#{$configure_hash["postgresql_recovery_target_lsn"]}")
      f.puts("POSTGRESQL_LOG_LINE_PREFIX=lantern-logline: app: %a user: %u time: %t proc_start: %s pid: %p linenumber: %l === ")
      f.puts("POSTGRESQL_LOG_DURATION=true")
      f.puts("POSTGRESQL_LOG_MIN_DURATION_STATEMENT=250ms")
      f.puts("GOOGLE_APPLICATION_CREDENTIALS_BIGQUERY_B64=#{$configure_hash["gcp_creds_big_query_b64"]}")
      f.puts("BIGQUERY_DATASET=#{$configure_hash["big_query_dataset"]}")

      if $configure_hash["enable_auditlogs"]
        f.puts("POSTGRESQL_PGAUDIT_LOG=READ,WRITE")
      end

      if $configure_hash["db_user"] != "postgres"
        f.puts("POSTGRESQL_PASSWORD='#{$configure_hash["db_user_password"]}'")
      else
        f.puts("POSTGRESQL_PASSWORD='#{$configure_hash["postgres_password"]}'")
      end
    end
  end
end

def setup_initial_compose_file
  # setup_initial_compose_file
  memory_sizes = calculate_memory_sizes

  map = {
    "services" => {
      "postgresql" => {
        "image" => $configure_hash["container_image"],
        "ports" => ["5432:5432", "6432:6432"],
        "volumes" => ["/var/lib/lantern-data:/bitnami/postgresql"],
        "deploy" => {
          "restart_policy" => {"condition" => "always"},
          "resources" => {"limits" => {"memory" => memory_sizes[:shared_bufs]}}
        },
        "env_file" => $env_file,
        "shm_size" => memory_sizes[:shm_size]
      }
    }
  }

  if $configure_hash["gcp_creds_logging_b64"]
    r "echo #{$configure_hash["gcp_creds_logging_b64"]} | base64 -d > #{$workdir}/logging_creds.json"
    gcp_project = JSON.parse(File.read("#{$workdir}/logging_creds.json"))["project_id"]
    r "sudo sed -i \"/[Service]/a Environment=\"GOOGLE_APPLICATION_CREDENTIALS=#{$workdir}/logging_creds.json\"\" /usr/lib/systemd/system/docker.service"
    r "sudo sed -i \"/BASE=docker/a export GOOGLE_APPLICATION_CREDENTIALS=#{$workdir}/logging_creds.json\" /etc/init.d/docker"
    r "sudo systemctl daemon-reload 2>/dev/null || echo 'No systemctl in host'"

    gcp_meta_name = "#{$configure_hash["instance_id"]}-#{$configure_hash["instance_type"]}"
    map["services"]["postgresql"]["logging"] = {
      "driver" => "gcplogs",
      "options" => {
        "gcp-project" => gcp_project,
        "gcp-meta-name" => gcp_meta_name,
        "gcp-meta-id" => gcp_meta_name,
        "labels" => "self-hosted"
      }
    }
  end

  unless File.file?($compose_file)
    File.write($compose_file, map.to_yaml)
  end
end

if $configure_hash[:skip_deps].nil?
  install_dependencies
  puts "dependencies installed"
  configure_gcr($configure_hash["gcp_creds_gcr_b64"], $configure_hash["container_image"])
  puts "GCR repo ready"
end

setup_memory_limits
setup_fs
puts "filesystem ready"
setup_env
puts ".env setted up"
setup_initial_compose_file
puts "docker-compose.yaml ready"
run_database($configure_hash["container_image"])
puts "database ready"
